<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo + GitHub Pages搭建个人免费博客</title>
    <url>/2021/05/11/Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>综合了很多种方案，平衡稳定、简洁等因素，最终还是决定使用<a href="https://hexo.io/zh-cn/">Hexo</a>+<a href="https://pages.github.com/">GitHub Pages</a>来搭建博客网站，虽然前期需要折腾一下，权当学习。</p>
<span id="more"></span>

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>需要安装<a href="https://git-scm.com/downloads">Git</a>和<a href="https://nodejs.org/zh-cn/">Node.js</a>，安装完成(包括设置好环境变量后)，打开cmd或PowerShell，输入<code>node -v</code>、<code>npm -v</code>和<code>git --version</code>，如图出现程序版本号即可。<br><img src="/2021/05/11/Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/environment.png" alt="git及node.js环境测试" title="Git及node.js环境">  </p>
<h1 id="连接GitHub"><a href="#连接GitHub" class="headerlink" title="连接GitHub"></a>连接GitHub</h1><ol>
<li><p>创建<a href="https://github.com/">GitHub</a>账户，完成邮件验证。</p>
</li>
<li><p>任意位置右键 -&gt; Git Bash Here, 设置用户名和邮箱，或者打开C:\Users\用户名\.gitconfig编辑:</p>
<pre><code> git config --global user.name &quot;Github用户名&quot;  
 git config --global user.email &quot;Github邮箱&quot;  
</code></pre>
</li>
<li><p>创建SSH密钥：<br>输入<code>ssh-keygen -t rsa -C &quot;Github邮箱&quot;</code>，然后一路回车确认。</p>
</li>
<li><p>添加密钥：<br>进入C:\Users\用户名.ssh目录（要勾选显示“隐藏的项目”），用记事本打开公钥id_rsa.pub 文件并完整复制里面的内容。<br>登陆GitHub，进入Settings页面，选择左边栏的SSH and GPG keys，点击New SSH key。Title随便，粘贴复制的id_rsa.pub内容到Key中，点击Add SSH key完成添加。<br><img src="/2021/05/11/Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/Github_ssh_1.png" alt="GitHub ssh 1" title="Github添加ssh1"><br><img src="/2021/05/11/Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/Github_ssh_2.png" alt="GitHub ssh 2" title="Github添加ssh2"></p>
</li>
<li><p>验证连接:<br>打开Git Bash, 输入<code>ssh -T git@github.com</code>出现“Are you sure …”, 输入yes回车确认。<br>显示”Hi xxx! You’ve successfully authenticated, but GitHub does not …”即连接成功。后续再次输入此命令时，将不需要输入yes确认，直接显示成功。<br><img src="/2021/05/11/Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/Verify_Link_To_Github.png" alt="GitHub Link" title="连接Github">  </p>
</li>
</ol>
<h1 id="创建Github-Pages仓库"><a href="#创建Github-Pages仓库" class="headerlink" title="创建Github Pages仓库"></a>创建Github Pages仓库</h1><p>GitHub主页右上角点加号-&gt;New repository:</p>
<ul>
<li>Repository name 中输入 用户名.github.io</li>
<li>勾选 “Initialize this repository with a README”</li>
<li>Description 选填</li>
</ul>
<p>填好后点击Create repository创建。<br><img src="/2021/05/11/Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2/CreateRepo.png" alt="GitHub create repository" title="Github创建一个仓库"></p>
<p>创建后默认自动启动HTTPS，博客地址为：<code>https://用户名.github.io</code></p>
<h1 id="本地安装Hexo博客程序"><a href="#本地安装Hexo博客程序" class="headerlink" title="本地安装Hexo博客程序"></a>本地安装Hexo博客程序</h1><p>新建一个文件夹用来存放Hexo的程序文件，如Hexo-Blog。进入该文件夹，右键-&gt;Git Bash Here。</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>使用npm一键安装Hexo博客程序：</p>
<pre><code>npm install -g hexo-cli
</code></pre>
<p>耐心等待安装完成后回到输入界面。</p>
<h2 id="Hexo初始化及预览"><a href="#Hexo初始化及预览" class="headerlink" title="Hexo初始化及预览"></a>Hexo初始化及预览</h2><p>初始化并安装所需组件：</p>
<pre><code>hexo init   # 初始化
npm install # 安装组件
</code></pre>
<p>完成后依次输入以下命令，启动本地服务器进行预览：</p>
<pre><code>hexo g      # 生成页面
hexo s      # 启动预览
</code></pre>
<p>访问<code>http://localhost:4000</code>，出现Hexo默认页面，本地博客安装成功！<br><strong>Tips:</strong> 如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行<code>hexo server -p 5000</code>更改端口号后重试。</p>
<p>Hexo博客文件夹目录结构如下：</p>
<pre><code>.
├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes
</code></pre>
<h2 id="部署Hexo到GitHub-Pages"><a href="#部署Hexo到GitHub-Pages" class="headerlink" title="部署Hexo到GitHub Pages"></a>部署Hexo到GitHub Pages</h2><p>本地博客测试成功后，再就是上传到GitHub进行部署，使其能够在网络上访问。<br>首先<strong>安装hexo-deployer-git:</strong></p>
<pre><code>npm install hexo-deployer-git --save
</code></pre>
<p>然后<strong>修改_config.yml</strong>文件末尾的Deployment部分：</p>
<pre><code>deploy:
    type: git
    repository: git@github.com:用户名/用户名.github.io.git
    branch: main
</code></pre>
<p>完成后运行hexo d将网站上传部署到GitHub Pages。<br>这时访问我们的GitHub域名<code>https://用户名.github.io</code>就可以看到上传的Hexo网站了。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><a href="https://hexo.io/zh-cn/" title="Hexo官网">Hexo - 快速、简洁且高效的博客框架</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/60578464" title="-知乎">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></li>
<li><a href="https://suyin-blog.club/2020/323EH2Y/" title="苏寅 Blog">Hexo-Next 主题安装并配置教程</a></li>
<li><a href="https://suyin-blog.club/2019/1YVTX5K/" title="苏寅 Blog">备份Hexo博客源文件</a></li>
<li><a href="https://blog.csdn.net/Wonz5130/article/details/84666519">解决 Hexo 搭建博客显示不出分类、标签问题</a></li>
</ol>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习之一、 C++简介</title>
    <url>/2021/05/15/%E4%B8%80%E3%80%81C-%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>开始学习C++之前的一些认知。</p>
<span id="more"></span>

<h1 id="C-语言特点"><a href="#C-语言特点" class="headerlink" title="C++语言特点"></a>C++语言特点</h1><p>C++融合了3种不同的编程方式：</p>
<ul>
<li>C语言代表的过程性语言</li>
<li>C++在C语言基础上添加的类代表的面向对象（OOP）语言</li>
<li>C++模板支持的泛型编程</li>
</ul>
<h1 id="C-起源"><a href="#C-起源" class="headerlink" title="C++起源"></a>C++起源</h1><p>诞生于贝尔实验室，<strong>Bjarne Stroustrup</strong>于20世纪80年代开发出了这种语言。基于C语言。</p>
<h1 id="C-标准"><a href="#C-标准" class="headerlink" title="C++标准"></a>C++标准</h1><ul>
<li>移植时需要对程序重新编译</li>
<li>C++98, C++11标准</li>
</ul>
<h1 id="C-语言风格"><a href="#C-语言风格" class="headerlink" title="C++语言风格"></a>C++语言风格</h1><ul>
<li>源代码文件扩展名</li>
</ul>
<table>
<thead>
<tr>
<th>C++实现</th>
<th>源代码文件的扩展名</th>
</tr>
</thead>
<tbody><tr>
<td>UNIX</td>
<td>C、cc、cxx、c</td>
</tr>
<tr>
<td>GNU C++</td>
<td>C、cc、cxx、cpp、c++</td>
</tr>
<tr>
<td>Digital Mars</td>
<td>cpp、cxx</td>
</tr>
<tr>
<td>Borland C++</td>
<td>cpp</td>
</tr>
<tr>
<td>Watcom</td>
<td>cpp</td>
</tr>
<tr>
<td>Microsoft Visual C++</td>
<td>cpp、cxx、cc</td>
</tr>
<tr>
<td>Freestyle CodeWarrior</td>
<td>cp、cpp、cc、cxx、c++</td>
</tr>
</tbody></table>
<ul>
<li>程序创建步骤</li>
</ul>
<p><img src="https://cdn.ptpress.cn/pubcloud/5B0A982E/ushu/UB7209840d845c9/online/FBOL7209841948eab/Images/7.png?x-oss-process=image/watermark,image_d2F0ZXJtYXJrL21vYmlsZS8xODkzODYzNjM4NTVCMEE5ODJFLnBuZz94LW9zcy1wcm9jZXNzPWltYWdlL3Jlc2l6ZSxQXzMw,t_10,g_center"></p>
<ul>
<li>常用编译器<ul>
<li>g++</li>
<li>gcc</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习之二、C++程序基本结构概述</title>
    <url>/2021/05/16/C-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8C%E3%80%81C-%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>C++ 程序的基本结构概述，如函数和类。</p>
<span id="more"></span>

<p>示例1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Simpmul.cpp <span class="comment">// 文件名存储后缀为 .cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> <span class="comment">// C++ 预处理</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">simpMul</span><span class="params">(<span class="keyword">int</span>)</span></span>;  <span class="comment">// 函数原型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  <span class="comment">// main 函数，程序入口</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> table = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">simpMul</span>(table);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 简易乘法表 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">simpMul</span><span class="params">(<span class="keyword">int</span> table)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= table; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; i*j &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-注释"><a href="#C-注释" class="headerlink" title="C++ 注释"></a>C++ 注释</h1><p>C++ 注释以 // 打头，到行尾结束。也可以位于单独的一行上。</p>
<p>C++ 也支持C风格的注释，C 注释包括在符号 /* 和 */ 之间，如：<code>/* 简易乘法表 */</code></p>
<h1 id="C-预处理和-iostream-文件"><a href="#C-预处理和-iostream-文件" class="headerlink" title="C++ 预处理和 iostream 文件"></a>C++ 预处理和 iostream 文件</h1><p>C++ 提供了两个用于处理输入和输出的预定义对象（ cin 和 cout ），它们是 <strong>istream</strong> 和 <strong>ostream</strong> 类的实例，这两个类是在 <strong>iostream</strong> 文件中定义的。</p>
<p>像 <strong>iostream</strong> 这样的文件叫做包含文件（ include file ），也叫头文件（ header file ），C 语言的传统是头文件使用扩展名 h，但 C++ 用法不同。现在，对老式 C 的头文件保留了扩展名 h （ C++ 程序仍然可以使用这种文件），而 C++ 头文件则没有扩展名。有些 C 头文件被转换为 C++ 头文件，这些文件被重新命名，去掉了扩展名 h （使之成为 C++ 风格的名称），并在文件名称前面加上前缀 c （表明来自 C 语言）。例如，C++ 版本的 math.h 为 cmath。有时 C 头文件的 C 版本和 C++ 版本相同，而有时候新的版本做了一些修改。对于纯粹的 C++ 头文件（如 iostream）来说，去掉 h 不只是形式上的变化，没有 h 的头文件也可以包含名称空间。下表对头文件的命名约定进行了总结。</p>
<table>
<thead>
<tr>
<th>头文件类型</th>
<th>约定</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>C++ 旧式风格</td>
<td>以 .h 结尾</td>
<td>iostream.h</td>
<td>C++ 程序可以使用</td>
</tr>
<tr>
<td>C 旧式风格</td>
<td>以 .h 结尾</td>
<td>math.h</td>
<td>C、C++ 程序可以使用</td>
</tr>
<tr>
<td>C++ 新式风格</td>
<td>没有扩展名</td>
<td>iostream</td>
<td>C++ 程序可以使用，使用 namespace std</td>
</tr>
<tr>
<td>转换后的C</td>
<td>加上前缀 c ，没有扩展名</td>
<td>cmath</td>
<td>C++ 程序可以使用，可以使用不是 C 的特性，如 namespace std</td>
</tr>
</tbody></table>
<h1 id="名称空间-namespace"><a href="#名称空间-namespace" class="headerlink" title="名称空间 namespace"></a>名称空间 namespace</h1><p>名称空间支持是一项 C++ 特性，为了区分含有相同的名称的函数的不同封装的产品。三种使用情况。</p>
<h2 id="使用-using-namespace-xxx"><a href="#使用-using-namespace-xxx" class="headerlink" title="使用 using namespace xxx"></a>使用 using namespace xxx</h2><p>如使用 <code>using namespace std</code> 编译指令，后续使用 std 中的对象或方法可以直接使用，如 <code>cout</code>，<code>cin</code>，<code>endl</code> 等。</p>
<h2 id="使用-using-xxx-xx"><a href="#使用-using-xxx-xx" class="headerlink" title="使用 using xxx::xx"></a>使用 using xxx::xx</h2><p>这种情况和上述类似，但指定范围更精确。<br>如使用 <code>using std::cout</code> ，后面可以直接使用 <code>cout</code>，但是没有使用该指令的，如 <code>endl</code>，就需要使用完整路径 <code>std::endl</code>。</p>
<h2 id="不使用-using-编译指令"><a href="#不使用-using-编译指令" class="headerlink" title="不使用 using 编译指令"></a>不使用 using 编译指令</h2><p>如 <code>std::cout</code>, <code>std::cin</code>, <code>std::endl</code></p>
<h1 id="C-函数原型与函数定义"><a href="#C-函数原型与函数定义" class="headerlink" title="C++ 函数原型与函数定义"></a>C++ 函数原型与函数定义</h1><ul>
<li><p>函数原型：用于描述函数接口，描述函数的参数及返回值信息，头文件中的内容就是函数原型，没有具体的函数代码。</p>
</li>
<li><p>函数定义：具体的函数实现代码，一般包含于库文件中。</p>
</li>
</ul>
<p>C++ 程序应当为程序中使用的每个函数提供原型。</p>
<p>函数原型之于函数就像变量声明之于变量–指出涉及的类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span>)</span></span>;    <span class="comment">// 函数原型，没有具体代码</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> d)</span>   <span class="comment">// 函数定义</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 具体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习之三、C++基本数据类型</title>
    <url>/2021/05/17/C-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%89%E3%80%81C-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>C++ 内置数据类型分两组：基本数据类型和复合数据类型。本编介绍基本数据类型。</p>
<span id="more"></span>

<h1 id="基本数据类型–整型"><a href="#基本数据类型–整型" class="headerlink" title="基本数据类型–整型"></a>基本数据类型–整型</h1><p>整型是指没有小数部分的数字，如 2, 98, -376 和 0。术语宽度（ width ）用于描述存储整数时使用的内存量。使用的内存越多，则越宽。</p>
<p>C++ 的基本整型按宽度递增的顺序排列，分别有 <code>char</code>、<code>short</code>、<code>int</code>、<code>long</code> 和 C++11 新增的 <code>long long</code>，每种类型都有符号和无符号版本，因此总共有 10 种类型可供选择。</p>
<h2 id="数值整型"><a href="#数值整型" class="headerlink" title="数值整型"></a>数值整型</h2><p>数值型整型包括 <code>short</code>、<code>int</code>、<code>long</code> 和 C++11 新增的 <code>long long</code>。</p>
<h3 id="整型宽度"><a href="#整型宽度" class="headerlink" title="整型宽度"></a>整型宽度</h3><p>概念：C++ 字节由至少能够容纳实现的基本字符集的相邻位组成。也就是说 C++ 一个字节可能意味着大于8 bit，可能为8，16 或 32 bit。</p>
<p>C++ 提供了一种灵活的标准，它确保了最小长度（从 C 语言借鉴而来）：</p>
<ul>
<li><code>short</code> 至少 16 位；</li>
<li><code>int</code> 至少与 <code>short</code> 一样长；</li>
<li><code>long</code> 至少 32 位，且至少与 <code>int</code> 一样长；</li>
<li><code>long long</code> 至少 64 位，且至少与 <code>long</code> 一样长。</li>
</ul>
<p><strong>Tips:</strong> 上述4种整型都有一种不能存储负数值的无符号变体，其优点是可以增大变量能够存储的最大值，只需使用关键字 <code>unsigned</code> 来声明即可：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> n_short; <span class="comment">// 无符号 short 类型</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> n_int; <span class="comment">// 无符号 int 类型</span></span><br><span class="line"><span class="keyword">unsigned</span> n_int; <span class="comment">// int 可省略，仍然为无符号 int 类型</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> n_long;   <span class="comment">// 无符号 long 类型</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> n_llong; <span class="comment">// 无符号 long long 类型</span></span><br></pre></td></tr></table></figure>

<p>可使用运算符 <code>sizeof</code> 确定数据类型的宽度和头文件 <code>limits</code> 确定数据类型的取值范围。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;int is &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span> (<span class="keyword">int</span>) &lt;&lt; <span class="string">&quot; bytes.\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;int is &quot;</span> &lt;&lt; <span class="keyword">sizeof</span> n_int &lt;&lt; <span class="string">&quot; bytes.\n&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><code>limits</code> 头文件通过预编译（#define）方式，提供了一些符号常量：</p>
<table>
<thead>
<tr>
<th>符号常量</th>
<th>表示</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR_BIT</td>
<td>char 的位数</td>
</tr>
<tr>
<td>CHAR_MAX</td>
<td>char 的最大值</td>
</tr>
<tr>
<td>CHAR_MIN</td>
<td>char 的最小值</td>
</tr>
<tr>
<td>SCHAR_MAX</td>
<td>signed char 的最大值</td>
</tr>
<tr>
<td>SCHAR_MIN</td>
<td>signed char 的最小值</td>
</tr>
<tr>
<td>UCHAR_MAX</td>
<td>unsigned char 的最大值</td>
</tr>
<tr>
<td>SHRT_MAX</td>
<td>short 的最大值</td>
</tr>
<tr>
<td>SHRT_MIN</td>
<td>short 的最小值</td>
</tr>
<tr>
<td>USHRT_MAX</td>
<td>unsigned short 的最大值</td>
</tr>
<tr>
<td>INT_MAX</td>
<td>int 的最大值</td>
</tr>
<tr>
<td>INT_MIN</td>
<td>int 的最小值</td>
</tr>
<tr>
<td>UINT_MAX</td>
<td>unsigned int 的最大值</td>
</tr>
<tr>
<td>LONG_MAX</td>
<td>long 的最大值</td>
</tr>
<tr>
<td>LONG_MIN</td>
<td>long 的最小值</td>
</tr>
<tr>
<td>ULONG_MAX</td>
<td>unsigned long 的最大值</td>
</tr>
<tr>
<td>LLONG_MAX</td>
<td>long long 的最大值</td>
</tr>
<tr>
<td>LLONG_MIN</td>
<td>long long 的最小值</td>
</tr>
<tr>
<td>ULLONG_MAX</td>
<td>unsigned long long 的最大值</td>
</tr>
</tbody></table>
<h3 id="选择整型类型"><a href="#选择整型类型" class="headerlink" title="选择整型类型"></a>选择整型类型</h3><p>C++ 提供了如此多的整型，使用是应该怎么选择呢？</p>
<ul>
<li>通常，<code>int</code> 被设置为对目标计算机而言最为“自然”的长度，计算机处理起来效率最高。如果没有其它理由，则应使用 <code>int</code>。</li>
<li>如果变量表示的值不可能为负，则可以使用无符号类型，这样变量可以表示更大的值。</li>
<li>如果变量可能表示的整数值大于 16 位整数的最大可能值，则使用 <code>long</code>。即使系统上 <code>int</code> 为32位也应该这样做。这样，将程序移植到 16 位系统时，就不会突然无法正常工作。</li>
<li>如果要存储的值超过 20 亿，可使用 <code>long long</code>。</li>
<li>由于 <code>short</code> 比 <code>int</code> 小，使用 <code>short</code> 可以节省内存。通常，仅当有大型整型数组时，才有必要使用 <code>short</code>。如果节省内存很重要，则应使用 <code>short</code> 而不是使用 <code>int</code>。</li>
</ul>
<h3 id="整型字面值"><a href="#整型字面值" class="headerlink" title="整型字面值"></a>整型字面值</h3><ol>
<li><p>整型字面值，常用为四种不同的计数方式：</p>
<ul>
<li>十进制：第一位为 1~9，如 53</li>
<li>十进制：所有位都以 0 和 1 来表示，如 0101 等于十进制中 6</li>
<li>八进制：第一位为 0，第二位为 1~7，如 042 等于十进制中的 34</li>
<li>十六进制：前两位为 0x 或 0X，如 0x42 等于十进制的 66</li>
</ul>
<p> 进制计数方式只是为了人方便计数，在计算机中，最终都是以二进制存储。</p>
<p> <strong>Tips:</strong> <code>cout</code> 输出默认为十进制，<code>cout</code> 提供了控制符来控制显示 <code>dec</code>、<code>hex</code>、<code>oct</code>。具体如下：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">42</span>;</span><br><span class="line">cout &lt;&lt; a;  <span class="comment">// 默认打印为十进制：42</span></span><br><span class="line">cout &lt;&lt; hex;    <span class="comment">// 切换输出为十六进制</span></span><br><span class="line">cout &lt;&lt; a;  <span class="comment">// 输出打印为十六进制 2a</span></span><br><span class="line">cout &lt;&lt; oct;    <span class="comment">// 切换输出为八进制</span></span><br><span class="line">cout &lt;&lt; a;  <span class="comment">// 输出打印为八进制 52</span></span><br><span class="line">cout &lt;&lt; dec;    <span class="comment">// 切换输出为十进制</span></span><br><span class="line">cout &lt;&lt; a;  <span class="comment">// 输出打印为堤进制 42；</span></span><br></pre></td></tr></table></figure></li>
<li><p>C++ 如何确定常量的类型</p>
<p> 如程序是如何确定常量 1000 是存储为 <code>int</code>、<code>long</code> 还是其它类型呢？</p>
<ol>
<li>默认存储为 <code>int</code>。</li>
<li>数值后的后缀。后缀有 L(Long)、U(Unsigned int)、LL(long long) 及组合后缀。</li>
<li>数值的长度。在 C++ 中，对十进制整数采用的规则与十六进制及八进制的不同。对于不带后缀的十进制整数，使用 <code>int</code>、<code>long</code>、<code>long long</code> 中能够存储该数的最小类型来表示。对于不带后缀的十六进制或八进制，使用下面几种类型中能够存储该数的最小类型来表示：<code>int</code>、<code>unsigned int</code>、<code>long</code>、<code>unsigned long</code>、<code>long long</code> 或 <code>unsigned long long</code>。</li>
</ol>
</li>
</ol>
<h2 id="另一种整型-char-类型"><a href="#另一种整型-char-类型" class="headerlink" title="另一种整型- char 类型"></a>另一种整型- char 类型</h2><p><code>char</code> 是比 <code>short</code> 更小的整型，专为存储字符（字母或数字）而设计。它足够长，能够表示目标计算机系统中所有的基本符号——所有的字母、数字、标点符号。占用 8 bit。</p>
<p><code>char</code> 类型变量初始化：<code>char c = &#39;M&#39;</code></p>
<p>C++ 将字符表示为整数，可以进行算术运算。如 <code>char c = &#39;M&#39; + 1;</code></p>
<p>使用 <code>cin</code> 输入时都是输入的字符，然后强转为其它类型存储。</p>
<h3 id="char-字面值"><a href="#char-字面值" class="headerlink" title="char 字面值"></a>char 字面值</h3><ul>
<li>以单引号括号括起来。如 <code>&#39;M&#39;</code>、<code>&#39;N&#39;</code>、<code>&#39;&#39;</code>、<code>&#39;5&#39;</code></li>
<li>不能直接通过键盘输入的字符使用转义序列。如<code>&#39;\a&#39;</code>、<code>&#39;\t&#39;</code>、<code>&#39;\n&#39;</code><br>C++ 转义序列的编码</li>
</ul>
<table>
<thead>
<tr>
<th>字符名称</th>
<th>ASCII 符号</th>
<th>C++ 代码</th>
<th>十进制 ASCII 编码</th>
<th>十六进制 ASCII 编码</th>
</tr>
</thead>
<tbody><tr>
<td>换行符</td>
<td>NL(LF)</td>
<td>\n</td>
<td>10</td>
<td>0xA</td>
</tr>
<tr>
<td>水平制表符</td>
<td>HT</td>
<td>\t</td>
<td>9</td>
<td>0x9</td>
</tr>
<tr>
<td>垂直制表符</td>
<td>VT</td>
<td>\v</td>
<td>11</td>
<td>0xB</td>
</tr>
<tr>
<td>退格</td>
<td>BS</td>
<td>\b</td>
<td>8</td>
<td>0x8</td>
</tr>
<tr>
<td>回车</td>
<td>CR</td>
<td>\r</td>
<td>13</td>
<td>0xD</td>
</tr>
<tr>
<td>振铃</td>
<td>BEL</td>
<td>\a</td>
<td>7</td>
<td>0x7</td>
</tr>
<tr>
<td>反斜杠</td>
<td>\</td>
<td>\\</td>
<td>92</td>
<td>0x5C</td>
</tr>
<tr>
<td>问号</td>
<td>?</td>
<td>\?</td>
<td>63</td>
<td>0x3F</td>
</tr>
<tr>
<td>单引号</td>
<td>‘</td>
<td>\‘</td>
<td>39</td>
<td>0x27</td>
</tr>
<tr>
<td>双引号</td>
<td>“</td>
<td>\“</td>
<td>34</td>
<td>0x22</td>
</tr>
</tbody></table>
<p><strong>Tips:</strong> 应该像处理常规字符那样处理转义字符（如\n）。也就是说，将它们作为字符常量时，应用单引号括起来；将它们放在字符串中时，不要使用单引号。</p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ol>
<li><p>变量用来表征：</p>
<ul>
<li>信息将存储在哪里；</li>
<li>要存储什么值；</li>
<li>存储何种类型的信息；</li>
</ul>
</li>
<li><p>C++ 变量名命名规则</p>
<ul>
<li>名称中只能使用字母字符、数字和下划线（_）。</li>
<li>名称中第一个字符不能是数字。</li>
<li>区分大小写。</li>
<li>不能将 C++ 关键字用作名称。</li>
<li>以两个下划线开头或以下划线和大写字母打头的名称被保留给实现（编译器及其使用的资源）使用。以一个下划线开头的名称被保留给实现，用作全局标识符。</li>
<li>C++ 对于名称长度没有限制。</li>
</ul>
</li>
<li><p>变量初始化</p>
<p> 如果不对函数内部定义的变量进行初始化，该变量的值将是不确定的。</p>
<ul>
<li><p>常规方式：<code> int n_int = INT_MAX;</code> <code>int one = 1;</code></p>
</li>
<li><p>C++ 方式：<code> short n_short = &#123;SHRT_MAX&#125;;</code></p>
</li>
<li><p>C++11 新增方式：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n_int = &#123;INT_MAX&#125;;    <span class="comment">// 大括号初始化器</span></span><br><span class="line"><span class="keyword">int</span> n_int&#123;INT_MAX&#125;;   <span class="comment">// 可省略等号</span></span><br><span class="line"><span class="keyword">int</span> n_int&#123;&#125;;   <span class="comment">// 大括号可以不包含任何东西，这种情况将初始化为0</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2021/05/17/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>Git 常用的一些命令汇总，及相关用法。</p>
<span id="more"></span>

<h1 id="初次运行-Git-前的配置"><a href="#初次运行-Git-前的配置" class="headerlink" title="初次运行 Git 前的配置"></a>初次运行 Git 前的配置</h1><pre><code>git config --system // 系统配置文件，包含系统上每一个用户及他们仓库的通用配置
git config --global // 针对当前用户的配置
git config --local  // 针对该仓库，需要进入某个 Git 仓库中才能使用该命令
</code></pre>
]]></content>
      <categories>
        <category>Git学习</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习之七、C++的编程模块</title>
    <url>/2021/05/19/C-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%B8%83%E3%80%81C-%E7%9A%84%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>函数是如何工作的；如何使用函数来处理数组、字符串和结构；递归和函数指针的基本知识。</p>
<span id="more"></span>

<h1 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h1><ul>
<li><p>函数大致分两类，无返回值和有返回值。</p>
<p>  无返回值：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void functionName(parameterList)</span><br><span class="line">&#123;</span><br><span class="line">    statement(s)</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  有返回值：<br>  ```<br>  typeName functionName(parameterList)<br>  {</p>
<pre><code>  statements
  return value;   // 返回值为 value 或转换为 typeName 类型的值
</code></pre>
<p>  }</p>
</li>
</ul>
]]></content>
      <categories>
        <category>C++学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
